################################################################
# simple-s Theme
# https://github.com/raffitz/simple-s
#
# This theme was based on lfiolhais's Theme:
# https://github.com/lfiolhais/theme-simple-ass-prompt
# And on Mathias Bynens's Theme:
# https://github.com/mathiasbynens/dotfiles
# And on Nicolas Gallagher's Theme:
# https://github.com/necolas/dotfiles
################################################################

# Symbols are:
#	âœ“	
#	!	
#	â˜¡	
#	â†©	

prompt_git () {
	s=""
	branchName=$(git symbolic-ref --quiet --short HEAD 2> /dev/null || git rev-parse --short HEAD 2> /dev/null || echo '(unknown)')
	
	
	# Check if the current directory is in a Git repository.
	if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]]; then

		git update-index --really-refresh -q &>/dev/null;

		# Check for uncommitted changes in the index.
		if ! $(git diff --quiet --ignore-submodules --cached); then
			s+='âœ“';
		fi;

		# Check for unstaged changes.
		if ! $(git diff-files --quiet --ignore-submodules --); then
			s+='!';
		fi;

		# Check for untracked files.
		if [ -n "$(git ls-files --others --exclude-standard)" ]; then
			s+='â˜¡';
		fi;

		# Check for stashed files.
		if $(git rev-parse --verify refs/stash &>/dev/null); then
			s+='â†©';
		fi;
		
		if [[ $(git rev-list "${branch_name}"@{upstream}..HEAD 2>/dev/null | wc -l) != "0" ]]; then
			s+='+';
		else
			if [[ $(git rev-list HEAD.."${branch_name}"@{upstream} 2>/dev/null | wc -l) != "0" ]]; then
				s+='-';
			fi;
		fi;

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "${1}${branchName}${2}${s}%{[00m%}";
	fi;
}

# Following function blatantly plagiarised from https://github.com/sorin-ionescu/prezto/
# Original author is https://github.com/lunaryorn
prompt_sorin_pwd () {
	autoload -U regexp-replace

	abbreviated="${PWD/#${HOME}/~}"
	head="${abbreviated:h}"
	regexp-replace head '/[^/]*' '/${MATCH:1:1}'
	_prompt_sorin_pwd="${head}/${abbreviated:t}"
  
	echo $_prompt_sorin_pwd
}
# End of blatant plagiarising

prompt_failed () {
	if [[ $? != 0 ]]; then
		echo "%{[01;38;05;1m%}âœ˜%{[00m%}"
	fi
}

prompt_simple-s_setup () {

local -a schars
autoload -Uz prompt_special_chars
prompt_special_chars

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="%{[01;38;05;1m%}";
else
	userStyle="%{[38;05;3m%}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="%{[01;38;05;9m%}";
	hostEnd="%{[00m%}";
else
	hostStyle="%{[38;05;11m%}";
	hostEnd="%{[00m%}";
fi;

setopt PROMPT_SUBST

PS1="${userStyle}%n"; # username
PS1+="%{[38;05;15m%} at ";
PS1+="${hostStyle}%m${hostEnd}"; # host
PS1+="%{[38;05;15m%} in ";
PS1+="%{[38;05;2m%}\$(prompt_sorin_pwd)"; # working directory
PS1+="\$(prompt_git \"%{[38;05;15m%} on %{[38;05;13m%}\" \"%{[38;05;4m%}\")"; # Git repository details
PS1+=$'\n'
PS2="%{[01;38;05;15m%}â†ª%{[00m%} "; # `â†ª` (and reset color)
PS1+=$PS2


RPS1="\$(prompt_failed)"

prompt_opts=(cr subst percent)

}

prompt_simple-s_setup "$@"
